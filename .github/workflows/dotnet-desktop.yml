
name: .NET

on: 
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.200

    - name: Restore dependencies
      run: dotnet restore ./src/HackaMed/HackaMed.sln

    - name: Build
      run: dotnet build ./src/HackaMed/HackaMed.sln --no-restore

    #- name: Tests
     # run: dotnet test ./src/HackaMed/HackaMed.sln

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Docker AWS Login
      run: aws ecr get-login-password --region ${{secrets.AWS_REGION}} | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}

    - name: Build and Push Docker Ecr images
      run: |
        cd src
        cd HackaMed
        docker build -t hackamed-img:latest -f HackaMed/Dockerfile .
        docker tag hackamed-img:latest ${{ secrets.AWS_REGISTRY_URL }}:hackamed-img
        docker push ${{ secrets.AWS_REGISTRY_URL }}:hackamed-img
        
      # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Hub images
      run: |
        docker tag hackamed-img:latest ${{ secrets.DOCKER_HUB_URL }}:hackamed-img
        docker push ${{ secrets.DOCKER_HUB_URL }}:hackamed-img

    - name: Set AWS ConfigMap Variables
      id: set-configmap-variables
      run: |
        echo "::set-output name=aws_access_key_id::${{ secrets.AWS_ACCESS_KEY_ID }}"
        echo "::set-output name=aws_secret_access_key::${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        echo "::set-output name=aws_region::${{ secrets.AWS_REGION }}"
        echo "::set-output name=db_connection_string::${{ secrets.DB_CONNECTION_STRING }}"
        echo "::set-output name=db_database_name::${{ secrets.DB_DATABASE_NAME }}"
        echo "::set-output name=db_user::${{ secrets.DB_USER }}"
        echo "::set-output name=db_password::${{ secrets.DB_PASSWORD }}"
        echo "::set-output name=mongo_initdb_database::${{ secrets.MONGO_INITDB_DATABASE }}"
        echo "::set-output name=mongo_initdb_root_username::${{ secrets.MONGO_INITDB_ROOT_USERNAME }}"
        echo "::set-output name=mongo_initdb_root_password::${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}"


    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.18.0'

    - name: Update kubeconfig
      run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Delete from EKS
      run:  |
         cd src
         cd HackaMed
         kubectl delete -f ./k8s/


    - name: Update Kubernetes ConfigMap
      run: |
         kubectl create configmap my-config \
          --from-literal=AWS_ACCESS_KEY_ID=${{ steps.set-configmap-variables.outputs.aws_access_key_id }} \
          --from-literal=AWS_SECRET_ACCESS_KEY=${{ steps.set-configmap-variables.outputs.aws_secret_access_key }} \
          --from-literal=AWS_REGION=${{ steps.set-configmap-variables.outputs.aws_region }} \
          --from-literal=AWS_DEFAULT_REGION=${{ steps.set-configmap-variables.outputs.aws_region }} \
          --from-literal=DatabaseConfig__ConnectionString=${{ steps.set-configmap-variables.outputs.db_connection_string }} \
          --from-literal=DatabaseConfig__DatabaseName=${{ steps.set-configmap-variables.outputs.db_database_name }} \
          --from-literal=DatabaseConfig__User=${{ steps.set-configmap-variables.outputs.db_user }} \
          --from-literal=DatabaseConfig__Password=${{ steps.set-configmap-variables.outputs.db_password }} \
          --from-literal=MONGO_INITDB_DATABASE=${{ steps.set-configmap-variables.outputs.mongo_initdb_database }} \
          --from-literal=MONGO_INITDB_ROOT_USERNAME=${{ steps.set-configmap-variables.outputs.mongo_initdb_root_username }} \
          --from-literal=MONGO_INITDB_ROOT_PASSWORD=${{ steps.set-configmap-variables.outputs.mongo_initdb_root_password }} \
          --dry-run=client -o yaml | kubectl apply -f -
      

    - name: Deploy to EKS
      run:  |
         cd src
         cd HackaMed
         cd k8s
         kubectl apply -f application-services.yml
         kubectl apply -f application-config.yml
         kubectl apply -f mongodb-config.yml
         kubectl apply -f private-lb.yml
         kubectl apply -f public-lb.yml
         
         
    # kubectl apply -f ./k8s/
